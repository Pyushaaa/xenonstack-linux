#!/bin/bash

# Function to display help
show_help() {
    echo "Usage: sysopctl [command] [options]"
    echo ""
    echo "Commands:"
    echo "  service list                      List all running services."
    echo "  service start <service-name>      Start a specified service."
    echo "  service stop <service-name>       Stop a specified service."
    echo "  system load                       Display current system load averages."
    echo "  disk usage                        Display disk usage statistics by partition."
    echo "  process monitor                   Monitor real-time system processes."
    echo "  logs analyze                      Analyze recent critical log entries."
    echo "  backup <path>                     Backup files from a specified path."
    echo ""
}

# Function to list running services
list_services() {
    echo "Listing running services..."
    systemctl list-units --type=service --state=running
}

# Function to start or stop a service
manage_service() {
    action=$1
    service_name=$2

    if [[ -z $service_name ]]; then
        echo "Error: Missing service name."
        echo "Usage: sysopctl service $action <service-name>"
        exit 1
    fi

    echo "${action^}ing service: $service_name..."
    systemctl $action $service_name

    if [ $? -eq 0 ]; then
        echo "Service $service_name has been ${action}ed successfully."
    else
        echo "Failed to ${action} service $service_name."
    fi
}

# Function to view system load
view_system_load() {
    echo "Current system load averages:"
    uptime
}

# Function to check disk usage
check_disk_usage() {
    echo "Checking disk usage..."
    df -h
}

# Function to monitor system processes
monitor_processes() {
    echo "Monitoring system processes (press 'q' to quit)..."
    top
}

# Function to analyze system logs
analyze_logs() {
    echo "Analyzing recent critical log entries..."
    journalctl -p crit --since "1 hour ago"
}

# Function to backup system files
backup_files() {
    path=$1

    if [[ -z $path ]]; then
        echo "Error: Missing path for backup."
        echo "Usage: sysopctl backup <path>"
        exit 1
    fi

    backup_dest="/backup/$(basename $path)_$(date +%F_%T)"
    echo "Backing up $path to $backup_dest..."

    # Make sure the backup directory exists
    mkdir -p /backup

    rsync -avh $path $backup_dest

    if [ $? -eq 0 ]; then
        echo "Backup completed successfully to $backup_dest."
    else
        echo "Backup failed."
    fi
}

# Main script logic
case "$1" in
    # Part 1 - Level Easy
    service)
        case "$2" in
            list)
                list_services
                ;;
            start)
                manage_service start $3
                ;;
            stop)
                manage_service stop $3
                ;;
            *)
                echo "Invalid service command."
                show_help
                ;;
        esac
        ;;
    system)
        if [[ "$2" == "load" ]]; then
            view_system_load
        else
            echo "Invalid system command."
            show_help
        fi
        ;;
    disk)
        if [[ "$2" == "usage" ]]; then
            check_disk_usage
        else
            echo "Invalid disk command."
            show_help
        fi
        ;;
    # Part 3 - Advanced Level
    process)
        if [[ "$2" == "monitor" ]]; then
            monitor_processes
        else
            echo "Invalid process command."
            show_help
        fi
        ;;
    logs)
        if [[ "$2" == "analyze" ]]; then
            analyze_logs
        else
            echo "Invalid logs command."
            show_help
        fi
        ;;
    backup)
        backup_files $2
        ;;
    *)
        echo "Invalid command."
        show_help
        ;;
esac
